C51 COMPILER V9.60.0.0   LIB_LCD_8051                                                      04/23/2020 19:25:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LIB_LCD_8051
OBJECT MODULE PLACED IN .\Objects\LIB_lcd_8051.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LIB_lcd_8051.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\LIB_lcd_8051.lst) TABS(2) OBJECT(.\Objects\LIB_lcd_8051.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "LIB_lcd_8051.h"
   3          #include "Port_lcd_4bit.h"
   4          
   5          void delay_us(unsigned int t)  // Ham tre micro giay
   6          {
   7   1        unsigned int i;
   8   1        for(i=0;i<t;i++);
   9   1      }
  10          void delay_ms(unsigned int t) // Ham tre mini giay
  11          {
  12   1        unsigned int i,j;
  13   1        for(i=0;i<t;i++)
  14   1          for(j=0;j<123;j++);
  15   1      }
  16          // Ham cho phep hien thi len LCD
  17          void LCD_Enable(void)
  18          {
  19   1        LCD_EN = 1;
  20   1        delay_us(3);
  21   1        LCD_EN = 0;
  22   1        delay_us(50); 
  23   1      }
  24          // Ham gui 4 bit
  25          void LCD_Send4Bit(unsigned char Data)
  26          {
  27   1        LCD_D4 = Data & 0x01;
  28   1        LCD_D5 = (Data>>1)&1;
  29   1        LCD_D6 = (Data>>2)&1;
  30   1        LCD_D7 = (Data>>3)&1;
  31   1      }
  32          // Ham gui 1 Byte du lieu
  33          void LCD_Send1Byte(unsigned char byte)
  34          {
  35   1        LCD_Send4Bit(byte >>4);/* Gui 4 bit cao */
  36   1        LCD_Enable();
  37   1        LCD_Send4Bit(byte); /* Gui 4 bit thap*/
  38   1        LCD_Enable();
  39   1      }
  40          // Ham xoa man hinh
  41          void LCD_Clear()
  42          {
  43   1        LCD_Send1Byte(0x01);
  44   1        delay_us(10);
  45   1      }
  46          // Ham khoi tao LCD
  47          void LCD_Init()
  48          {
  49   1        LCD_Send4Bit(0x00);
  50   1        delay_ms(20);
  51   1        LCD_RS = 0;
  52   1        LCD_Send4Bit(0x03);  // function setting
  53   1        LCD_Enable();
  54   1        delay_ms(5);
C51 COMPILER V9.60.0.0   LIB_LCD_8051                                                      04/23/2020 19:25:25 PAGE 2   

  55   1        LCD_Enable();
  56   1        delay_ms(100);
  57   1        LCD_Enable();
  58   1        LCD_Send4Bit(0x02); // dua con tro ve dau man hinh
  59   1        LCD_Enable();
  60   1        LCD_Send1Byte(0x28);  // Function Setting(001D NF**) D=0(4bit), N=1(2hang), F=0(5x8), **=00 
  61   1        LCD_Send1Byte(0x0C); // Bat hien thi, tat con tro
  62   1        LCD_Send1Byte(0x06);
  63   1        LCD_Clear();
  64   1        delay_ms(20);
  65   1      }
  66          // Ham di chuyen con tro: row=0-1; col=0-15 (2 hang + 16 cot)
  67          void LCD_SetCursor(unsigned char row, unsigned char col)
  68          {
  69   1        unsigned char address;   
  70   1        if (row == 0) address = (0x80 + col);  // row=0 - hang 1
  71   1          else address = (0xC0 + col);       // row=1 - hang 2
  72   1          delay_us(1000);
  73   1          LCD_Send1Byte(address);
  74   1          delay_us(50);
  75   1      }
  76          // Ham hien thi ra man hinh chuoi ki tu
  77          void LCD_Print(char *s)
  78          {
  79   1        while (*s)
  80   1        {
  81   2          LCD_RS=1;
  82   2          LCD_Send1Byte(*s);
  83   2          //delay_ms(800);
  84   2          LCD_RS=0;
  85   2          s++;
  86   2        }
  87   1      }
  88          void LCD_PutChar(char c)
  89          {
  90   1        LCD_RS=1;
  91   1        LCD_Send1Byte(c);//c la ma trong bang lenh ki tu cua LCD HD44780
  92   1        LCD_RS=0;
  93   1      }
  94          void LCD_PutInt(unsigned int t)
  95          {
  96   1        LCD_RS=1;
  97   1        LCD_Send1Byte(t);
  98   1        LCD_RS=0;
  99   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    286    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
